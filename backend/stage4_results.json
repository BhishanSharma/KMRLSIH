[
  {
    "doc_id": "Needforarray-660x379.png",
    "raw_text": "int v1 = 10;\nint v2 = 20;\n\nint v3 = 30;\nint v5 = 50;\n\nSingle Array to store all values\n\nMultiple variables\nto store each value\n",
    "file_type": "png",
    "length": 28,
    "cleaned_text": "int v1  10; int v2  20; int v3  30; int v5  50; single array to store all values multiple variables to store each value ",
    "sentences": [
      "int v1  10; int v2  20; int v3  30; int v5  50; single array to store all values multiple variables to store each value"
    ],
    "words": [
      "int",
      "v<NUM>",
      "<NUM>",
      "int",
      "v<NUM>",
      "<NUM>",
      "int",
      "v<NUM>",
      "<NUM>",
      "int",
      "v<NUM>",
      "<NUM>",
      "single",
      "array",
      "store",
      "value",
      "multiple",
      "variable",
      "store",
      "value"
    ],
    "num_sentences": 1,
    "num_words": 20,
    "chunks": [
      {
        "sentences": [
          "int v1  10; int v2  20; int v3  30; int v5  50; single array to store all values multiple variables to store each value"
        ],
        "words": [
          "int",
          "v1",
          "10;",
          "int",
          "v2",
          "20;",
          "int",
          "v3",
          "30;",
          "int",
          "v5",
          "50;",
          "single",
          "array",
          "to",
          "store",
          "all",
          "values",
          "multiple",
          "variables",
          "to",
          "store",
          "each",
          "value"
        ],
        "chunk_id": 1,
        "entities": {},
        "summary": "int v1  10; int v2  20; int v3  30; int v5  50; single array to store all values multiple variables to store each value"
      }
    ],
    "doc_summary": "int v1  10; int v2  20; int v3  30; int v5  50; single array to store all values multiple variables to store each value",
    "entities": {}
  },
  {
    "doc_id": "output.pdf",
    "raw_text": "üì¶ Live Supply Tracker\nüîç Search / Filter\nüìä Live Stats\n‚è± ETA Prediction\n+\nSearch by city or status... +\n‚àí\nNo active shipments found. ‚Äì\n¬© Mapbox ¬© OpenStreetMap Improve this mapüìã Shipment History\nSearch by location...üöö Live Supply Tracker\nSimulate Move\nSearch by city or status... +\nNo active shipments found. ‚Äìüìã Shipment History\nSearch by location...",
    "file_type": "pdf",
    "length": 60,
    "cleaned_text": " live supply tracker  search  filter  live stats  eta prediction  search by city or status...   no active shipments found.   mapbox  openstreetmap improve this map shipment history search by location... live supply tracker simulate move search by city or status...  no active shipments found.  shipment history search by location...",
    "sentences": [
      " live supply tracker  search  filter  live stats  eta prediction  search by city or status...   no active shipments found.",
      "mapbox  openstreetmap improve this map shipment history search by location... live supply tracker simulate move search by city or status...  no active shipments found.",
      "shipment history search by location..."
    ],
    "words": [
      "live",
      "supply",
      "tracker",
      "search",
      "filter",
      "live",
      "stats",
      "eta",
      "prediction",
      "search",
      "city",
      "status",
      "active",
      "shipment",
      "found",
      "mapbox",
      "openstreetmap",
      "improve",
      "map",
      "shipment",
      "history",
      "search",
      "location",
      "live",
      "supply",
      "tracker",
      "simulate",
      "move",
      "search",
      "city",
      "status",
      "active",
      "shipment",
      "found",
      "shipment",
      "history",
      "search",
      "location"
    ],
    "num_sentences": 3,
    "num_words": 38,
    "chunks": [
      {
        "sentences": [
          " live supply tracker  search  filter  live stats  eta prediction  search by city or status...   no active shipments found.",
          "mapbox  openstreetmap improve this map shipment history search by location... live supply tracker simulate move search by city or status...  no active shipments found.",
          "shipment history search by location..."
        ],
        "words": [
          "live",
          "supply",
          "tracker",
          "search",
          "filter",
          "live",
          "stats",
          "eta",
          "prediction",
          "search",
          "by",
          "city",
          "or",
          "status...",
          "no",
          "active",
          "shipments",
          "found.",
          "mapbox",
          "openstreetmap",
          "improve",
          "this",
          "map",
          "shipment",
          "history",
          "search",
          "by",
          "location...",
          "live",
          "supply",
          "tracker",
          "simulate",
          "move",
          "search",
          "by",
          "city",
          "or",
          "status...",
          "no",
          "active",
          "shipments",
          "found.",
          "shipment",
          "history",
          "search",
          "by",
          "location..."
        ],
        "chunk_id": 1,
        "entities": {},
        "summary": "live supply tracker search filter live stats eta prediction search by city or status... no active shipments found. mapbox openstreetmap improve this map shipment history search by location... live supply tracker simula"
      }
    ],
    "doc_summary": "live supply tracker search filter live stats eta prediction search by city or status... no active shipments found. mapbox openstreetmap improve this map shipment history search by location... live supply tracker simula",
    "entities": {}
  },
  {
    "doc_id": "arrayandlinkedlist.jpg",
    "raw_text": "Difference between ArrayList and LinkedList in Java\n\nArrayList LinkedList\nArrayList internally uses a dynamic array | LinkedList internally uses a doubly linked\nto store the elements listto store the elements\n\nelement is removed from the array, all | list, sono bit shifting is required in\n\nthe bits are shifted in memory. | memory.\n\nArrayList consumes less memory than [| A LinkedList consumes more memory than\n\nLinkedList an ArrayList because it also stores the next\nand previous references along with the\ndata,\n\n‚ÄòAn Arraylist class can act asa list only | LinkedList class can act as alist and\n\nbecause it implements List only. queue both because it implements List\nand Deque interfaces.\n\nArrayList is better for storing and LinkedList is better for manipulating data,\n\naccessing data,\n\n",
    "file_type": "jpg",
    "length": 125,
    "cleaned_text": "difference between arraylist and linkedlist in java arraylist linkedlist arraylist internally uses a dynamic array  linkedlist internally uses a doubly linked to store the elements listto store the elements element is removed from the array, all  list, sono bit shifting is required in the bits are shifted in memory.  memory. arraylist consumes less memory than  a linkedlist consumes more memory than linkedlist an arraylist because it also stores the next and previous references along with the data, an arraylist class can act asa list only  linkedlist class can act as alist and because it implements list only. queue both because it implements list and deque interfaces. arraylist is better for storing and linkedlist is better for manipulating data, accessing data, ",
    "sentences": [
      "difference between arraylist and linkedlist in java arraylist linkedlist arraylist internally uses a dynamic array  linkedlist internally uses a doubly linked to store the elements listto store the elements element is removed from the array, all  list, sono bit shifting is required in the bits are shifted in memory.",
      "memory.",
      "arraylist consumes less memory than  a linkedlist consumes more memory than linkedlist an arraylist because it also stores the next and previous references along with the data, an arraylist class can act asa list only  linkedlist class can act as alist and because it implements list only.",
      "queue both because it implements list and deque interfaces.",
      "arraylist is better for storing and linkedlist is better for manipulating data, accessing data,"
    ],
    "words": [
      "difference",
      "arraylist",
      "linkedlist",
      "java",
      "arraylist",
      "linkedlist",
      "arraylist",
      "internally",
      "us",
      "dynamic",
      "array",
      "linkedlist",
      "internally",
      "us",
      "doubly",
      "linked",
      "store",
      "element",
      "listto",
      "store",
      "element",
      "element",
      "removed",
      "array",
      "list",
      "sono",
      "bit",
      "shifting",
      "required",
      "bit",
      "shifted",
      "memory",
      "memory",
      "arraylist",
      "consumes",
      "less",
      "memory",
      "linkedlist",
      "consumes",
      "memory",
      "linkedlist",
      "arraylist",
      "also",
      "store",
      "next",
      "previous",
      "reference",
      "along",
      "data",
      "arraylist",
      "class",
      "act",
      "asa",
      "list",
      "linkedlist",
      "class",
      "act",
      "alist",
      "implement",
      "list",
      "queue",
      "implement",
      "list",
      "deque",
      "interface",
      "arraylist",
      "better",
      "storing",
      "linkedlist",
      "better",
      "manipulating",
      "data",
      "accessing",
      "data"
    ],
    "num_sentences": 5,
    "num_words": 74,
    "chunks": [
      {
        "sentences": [
          "difference between arraylist and linkedlist in java arraylist linkedlist arraylist internally uses a dynamic array  linkedlist internally uses a doubly linked to store the elements listto store the elements element is removed from the array, all  list, sono bit shifting is required in the bits are shifted in memory.",
          "memory.",
          "arraylist consumes less memory than  a linkedlist consumes more memory than linkedlist an arraylist because it also stores the next and previous references along with the data, an arraylist class can act asa list only  linkedlist class can act as alist and because it implements list only."
        ],
        "words": [
          "difference",
          "between",
          "arraylist",
          "and",
          "linkedlist",
          "in",
          "java",
          "arraylist",
          "linkedlist",
          "arraylist",
          "internally",
          "uses",
          "a",
          "dynamic",
          "array",
          "linkedlist",
          "internally",
          "uses",
          "a",
          "doubly",
          "linked",
          "to",
          "store",
          "the",
          "elements",
          "listto",
          "store",
          "the",
          "elements",
          "element",
          "is",
          "removed",
          "from",
          "the",
          "array,",
          "all",
          "list,",
          "sono",
          "bit",
          "shifting",
          "is",
          "required",
          "in",
          "the",
          "bits",
          "are",
          "shifted",
          "in",
          "memory.",
          "memory.",
          "arraylist",
          "consumes",
          "less",
          "memory",
          "than",
          "a",
          "linkedlist",
          "consumes",
          "more",
          "memory",
          "than",
          "linkedlist",
          "an",
          "arraylist",
          "because",
          "it",
          "also",
          "stores",
          "the",
          "next",
          "and",
          "previous",
          "references",
          "along",
          "with",
          "the",
          "data,",
          "an",
          "arraylist",
          "class",
          "can",
          "act",
          "asa",
          "list",
          "only",
          "linkedlist",
          "class",
          "can",
          "act",
          "as",
          "alist",
          "and",
          "because",
          "it",
          "implements",
          "list",
          "only."
        ],
        "chunk_id": 1,
        "entities": {},
        "summary": "rozd√≠l mezi arraylist a linkedlist v javƒõ arraylist linkedlist arraylist internally pou≈æ√≠v√° dynamick√Ω array linkedlist internally pou≈æ√≠v√° dvojitƒõ propojen√Ω pro ukl√°d√°n√≠ prvk≈Ø listu pro ukl√°d√°n√≠ prvk≈Ø prvek je"
      },
      {
        "sentences": [
          "queue both because it implements list and deque interfaces.",
          "arraylist is better for storing and linkedlist is better for manipulating data, accessing data,"
        ],
        "words": [
          "queue",
          "both",
          "because",
          "it",
          "implements",
          "list",
          "and",
          "deque",
          "interfaces.",
          "arraylist",
          "is",
          "better",
          "for",
          "storing",
          "and",
          "linkedlist",
          "is",
          "better",
          "for",
          "manipulating",
          "data,",
          "accessing",
          "data,"
        ],
        "chunk_id": 2,
        "entities": {},
        "summary": "queue both because it implements list and deque interfaces. arraylist is better for storing and linkedlist is better for manipulating data, accessing data,"
      }
    ],
    "doc_summary": "·ûó·û∂·ûñ ·ûÅ·ûª·ûü ·ûÇ·üí·ûì·û∂ ·ûö·ûú·û∂·ûÑ arraylist ·ûì·û∑·ûÑ linkedlist ·ûÄ·üí·ûì·ûª·ûÑ java arraylist linkedlist arraylist ·ûÅ·û∂·ûÑ ·ûÄ·üí·ûì·ûª·ûÑ ·ûî·üí·ûö·ûæ array dynamic linkedlist ·ûÅ·û∂·ûÑ ·ûÄ·üí·ûì·ûª·ûÑ ·ûî·üí·ûö·ûæ ·ûè·üÜ·ûé ·ûñ·û∏·ûö ·ûä·ûÑ ·ûä·ûæ·ûò·üí·ûî·û∏ ·ûë·ûª·ûÄ ·ûí·û∂·ûè·ûª listto store the elements element is removed from the",
    "entities": {}
  }
]